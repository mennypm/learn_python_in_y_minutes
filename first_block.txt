MC03:~ manny$ python
Python 2.7.10 (default, Feb  7 2017, 00:08:15) 
[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.34)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> # Single line comments start with a number symbol.
... """ Multiline strings can be written
...     using three "s, and are often used
...     as documentation.
... """
' Multiline strings can be written\n    using three "s, and are often used\n    as documentation.\n'
>>> ####################################################
... ## 1. Primitive Datatypes and Operators
... ####################################################
... 
>>> # You have numbers
... 3
3
>>> # Math is what you would expect
... 1 + 1
2
>>> 8 - 1
7
>>> 10 * 2
20
>>> 35 / 5
7
>>> # Result of integer division truncated down both for positive and negative.
... 5 // 3 
1
>>> 5.0 // 3.0 
1.0
>>> -5 // 3
-2
>>> -5.0 // 3.0
-2.0
>>> # The result of division is always a float
... 10.0 / 3
3.3333333333333335
>>> # Modulo operation
... 7 % 3
1
>>> 2**3
8
>>> # The last one was an exponentiation
... # Enforce precedence with parentheses
... (1 + 3) * 2
8
>>> # Boolean values are primitives (Note: the capitalization)
... True
True
>>> False
False
>>> # negate with not
... not True
False
>>> not False
True
>>> # Boolean Operators
... # Note "and" and "or" are case-sensitive
... True and False
False
>>> False or True 
True
>>> # Boolean Operators
... # Note "and" and "or" are case-sensitive
... True and False
False
>>> False or True 
True
>>> # Note using Bool operators with ints
... # False is 0 and True is 1
... 
>>> # Don't mix up with bool(ints) and bitwise and/or (&,|)
... 0 and 2
0
>>> -5 or 0
-5
>>> 0 == False
True
>>> 2 == True
False
>>> 1 == True
True
>>> -5 != False != True
True
>>> # Equality is ==
... 1 == 1
True
>>> 2 == 1
False
>>> # Inequality is !=
... 1 != 1
False
>>> 2 != 1
True
>>> # More comparisons
... 1 < 10
True
>>> 1 > 10 
False
>>> 2 <= 2
True
>>> 2 >= 2
True
>>> # Comparisons can be chained!
... 1 < 2 < 3
True
>>> 2 < 3 < 2
False
>>> # (is vs. ==) is checks if two variables refer to the same object, but == checks
... # if the objects pointed to have the same values.
... a = [1, 2, 3, 4]
>>> # Point a at a new list, [1, 2, 3, 4]
... b = a
>>> # Point b at what a is pointing to
... b is a
True
>>> # a and b refer to the same object
... b == a
True
>>> # a's and b's objects are equal
... b = [1, 2, 3, 4]
>>> # Point b at a new list, [1, 2, 3, 4]
... b is a
False
>>> # a and b do not refer to the same object
... b == a
True
>>> # a's and b's objects are equal
... # Strings are created with " or '
... "This is a string."
'This is a string.'
>>> 'This is also a string.'
'This is also a string.'
>>> # Strings can be added too! But try not to do this.
... "Hello " + "world!"
'Hello world!'
>>> # String literals (but not variables) can be concatenated without using '+'
... "Hello " "world!" 
'Hello world!'
>>> # A string can be treated like a list of characters
... "This is a string"[0]
'T'
>>> # You can find the length of a string
... len("This is a string") 
16
>>> # .format can be used to format strings, like this:
... # "Strings can be interpolated"
... "{} can be {}".format("Strings", "interpolated")
'Strings can be interpolated'
>>> # You can repeat the formatting arguments to save some typing.
... "{0} be nimble, {0} be quick, {0} jump over the {1}".format("Jack", "candle stick")
'Jack be nimble, Jack be quick, Jack jump over the candle stick'
>>> # You can use keywords if you don't want to count.
... "{name} wants to eat {food}".format(name="Bob", food="lasagna")
'Bob wants to eat lasagna'
>>> # If your Python 3 code also needs to run on Python 2.5 and below, you can also
... # still use the old style of formatting:
... "%s can be %s the %s way" % ("Strings", "interpolated", "old")
'Strings can be interpolated the old way'
>>> # None is an object
... None
>>> # Don't use the equality "==" symbol to compare objects to None
... # Use "is" instead. This checks for equality of object identity.
... "etc" is None
False
>>> "etc" == None
False
>>> None is None
True
>>> None == None
True
>>> # None, 0, and empty strings/lists/dicts/tuples all evaluate to False.
... # All other values are True
... bool(0)
False
>>> bool("")
False
>>> bool([])
False
>>> bool({})
False
>>> bool(())
False
