>>> ####################################################
... ## 3. Control Flow and Iterables
... ####################################################
... # Let's just make a variable
... some_var = 5
>>> # Here is an if statement. Indentation is significant in Python!
... # Convention is to use four spaces, not tabs.
... # This prints "some_var is smaller than 10"
... if some_var > 10:
...     print("some_var is totally bigger than 10.")
... elif some_var < 10:    # This elif clause is optional.
...     print("some_var is smaller than 10.")
... else:                  # This is optional too.
...     print("some_var is indeed 10.")
...
some_var is smaller than 10.
>>> """
... For loops iterate over lists
... prints:
...     dog is a mammal
...     cat is a mammal
...     mouse is a mammal
... """
'\nFor loops iterate over lists\nprints:\n    dog is a mammal\n    cat is a mammal\n    mouse is a mammal\n'
>>>
>>> for animal in ["dog", "cat", "mouse"]:
... # You can use format() to interpolate formatted strings
...     print("{} is a mammal".format(animal))
...
dog is a mammal
cat is a mammal
mouse is a mammal
>>> """
... "range(number)" returns an iterable of numbers
... from zero to the given number
... prints:
...     0
...     1
...     2
...     3
... """
'\n"range(number)" returns an iterable of numbers\nfrom zero to the given number\nprints:\n    0\n    1\n    2\n    3\n'
>>> for i in range(4):
...     print(i)
...
0
1
2
3
>>> """
... "range(lower, upper)" returns an iterable of numbers
... from the lower number to the upper number
... prints:
...     4
...     5
...     6
...     7
... """
'\n"range(lower, upper)" returns an iterable of numbers\nfrom the lower number to the upper number\nprints:\n    4\n    5\n    6\n    7\n'
>>> """
... "range(lower, upper)" returns an iterable of numbers
... from the lower number to the upper number
... prints:
...     4
...     5
...     6
...     7
... """
'\n"range(lower, upper)" returns an iterable of numbers\nfrom the lower number to the upper number\nprints:\n    4\n    5\n    6\n    7\n'
>>> for i in range(4, 8):
...     print(i)
...
4
5
6
7
>>> """
... "range(lower, upper, step)" returns an iterable of numbers
... from the lower number to the upper number, while incrementing
... by step. If step is not indicated, the default value is 1.
... prints:
...     4
...     6
... """
'\n"range(lower, upper, step)" returns an iterable of numbers\nfrom the lower number to the upper number, while incrementing\nby step. If step is not indicated, the default value is 1.\nprints:\n
  4\n    6\n'
>>> for i in range(4, 8, 2):
...     print(i)
...
4
6
>>> """
...
... While loops go until a condition is no longer met.
... prints:
...     0
...     1
...     2
...     3
... """
'\n\nWhile loops go until a condition is no longer met.\nprints:\n    0\n    1\n    2\n    3\n'
>>> x = 0
>>> while x < 4:
...     print(x)
...     x += 1
...     # Shorthand for x = x + 1
...
0
1
2
3
>>> # Handle exceptions with a try/except block
... try:
...     # Use "raise" to raise an error
...     raise IndexError("This is an index error")
... except IndexError as e:
...     pass                 # Pass is just a no-op. Usually you would do recovery here.
... except (TypeError, NameError):
...     pass                 # Multiple exceptions can be handled together, if required.
... else:                    # Optional clause to the try/except block. Must follow all except blocks
...     print("All good!")   # Runs only if the code in try raises no exceptions
... finally:                 #  Execute under all circumstances
...     print("We can clean up resources here")
>>> # Instead of try/finally to cleanup resources you can use a with statement
... with open("myfile.txt") as f:
...     for line in f:
...         print(line)
...
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
FileNotFoundError: [Errno 2] No such file or directory: 'myfile.txt'
>>> # Python offers a fundamental abstraction called the Iterable.
... # An iterable is an object that can be treated as a sequence.
... # The object returned by the range function, is an iterable.
... filled_dict = {"one": 1, "two": 2, "three": 3}
>>> our_iterable = filled_dict.keys()
>>> print(our_iterable)
dict_keys(['one', 'two', 'three'])
>>> # We can loop over it.
... for i in our_iterable:
...     print(i)
...
one
two
three
>>> # Instead of try/finally to cleanup resources you can use a with statement
... with open("myfile.txt") as f:
...     for line in f:
...         print(line)
...
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
FileNotFoundError: [Errno 2] No such file or directory: 'myfile.txt'
>>> # Python offers a fundamental abstraction called the Iterable.
... # An iterable is an object that can be treated as a sequence.
... # The object returned by the range function, is an iterable.
... filled_dict = {"one": 1, "two": 2, "three": 3}
>>> our_iterable = filled_dict.keys()
>>> print(our_iterable)
dict_keys(['one', 'two', 'three'])
>>> # We can loop over it.
... for i in our_iterable:
...     print(i)
...
one
two
three
>>> # However we cannot address elements by index.
... our_iterable[1]
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
TypeError: 'dict_keys' object does not support indexing
>>> # An iterable is an object that knows how to create an iterator.
... our_iterator = iter(our_iterable)
>>> # Our iterator is an object that can remember the state as we traverse through it.
... # We get the next object with "next()".
... next(our_iterator)
'one'
>>> # It maintains state as we iterate.
... next(our_iterator)
'two'
>>> next(our_iterator)
'three'
>>> # After the iterator has returned all of its data, it raises a StopIteration exception
... next(our_iterator)
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
StopIteration
>>> # You can grab all the elements of an iterator by calling list() on it.
... list(filled_dict.keys())
['one', 'two', 'three']
